openapi: '3.0.2'
info:
  title: NutriPlans API
  version: '0.0.0'
  description: |
    This API provides functionalities to manage and track your daily nutritional intake. This API also provides recommendations for healthy eating based on your preferences. To track the nutrition details of your food or drink, this API integrated with [Nutritionix API](https://www.nutritionix.com/business/api) service.
servers:
  - url: http://localhost:8080
    description: development server
tags:
  - name: users
    description: Authentication and user management
  - name: food types
    description: Food types management
  - name: drink types
    description: Drink types management
  - name: dietary preference types
    description: Dietary preference types management
  - name: preferences
    description: Preferences management
  - name: nutrition
    description: Nutritions informations

paths:
  /register:
    post:
      tags:
        - users
      summary: Register
      description: Register a new user
      operationId: register
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: success
                message: user created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: country not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: username already exist
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                failed create user:
                  value:
                    status: failed
                    message: failed to create user
                failed hashing password:
                  value:
                    status: failed
                    message: failed hashing password
  /login:
    post:
      tags:
        - users
      summary: Login
      description: Login a user
      operationId: login
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: success
                message: user logged in successfully
                data:
                  token: jwttoken

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: password mismatched
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: unregistered email
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                login failed:
                  value:
                    status: failed
                    message: failed to login
                failed generating token:
                  value:
                    status: failed
                    message: failed generating token
  /food-types:
    get:
      tags:
        - food types
      summary: Get food types
      description: Get food types
      operationId: getFoodTypes
      responses:
        '200':
          $ref: '#/components/responses/FoodTypesResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: failed to get food types
  /drink-types:
    get:
      tags:
        - drink types
      summary: Get drink types
      description: Get drink types
      operationId: getDrinkTypes
      responses:
        '200':
          $ref: '#/components/responses/DrinkTypesResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: failed to get drink types
  /dietary-preference-types:
    get:
      tags:
        - dietary preference types
      summary: Get dietary preference types
      description: Get dietary preference types
      operationId: getDietaryPreferenceTypes
      responses:
        '200':
          $ref: '#/components/responses/DietaryPreferenceTypesResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: failed to get dietary preference types
  /preferences:
    get:
      tags:
        - preferences
      summary: Get user preference
      description: Get user preference
      operationId: getUserPreference
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/PreferenceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: unregistered user
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: failed to get user preference
    put:
      tags:
        - preferences
      summary: Update user preference
      description: Update user preference
      operationId: updateUserPreference
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/PreferenceRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: success
                message: user preference updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: food/drink/dietary preference types not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: failed to update preference
  /nutrition/items/search:
    get:
      tags:
        - nutrition
      summary: Search items
      description: Search items
      operationId: searchItems
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/SearchItemsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: failed to search items
        '502':
          $ref: '#/components/responses/BadGateway'
  /nutrition/{item-name}:
    get:
      tags:
        - nutrition
      summary: Get item nutritions
      description: Get item nutritions
      operationId: getItemNutrition
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: item-name
          required: true
          schema:
            type: string
          description: The name of the item
          example: apple
      responses:
        '200':
          $ref: '#/components/responses/ItemNutritionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: item not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                status: failed
                message: failed to get item nutritions
        '502':
          $ref: '#/components/responses/BadGateway'

components:
  schemas:
    Country:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the country
        name:
          type: string
          description: The name of the country
        created_at:
          type: string
          format: date-time
          description: The created at of the country
        updated_at:
          type: string
          format: date-time
          description: The updated at of the country
        deleted_at:
          type: string
          format: date-time
          description: The deleted at of the country
    RoleType:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the role type
        name:
          type: string
          description: The name of the role type
        created_at:
          type: string
          format: date-time
          description: The created at of the role type
        updated_at:
          type: string
          format: date-time
          description: The updated at of the role type
        deleted_at:
          type: string
          format: date-time
          description: The deleted at of the role type
    Auth:
      type: object
      properties:
        id:
          type: string
          description: The ID of the auth (UUID)
        email:
          type: string
          description: The email of the auth
        password:
          type: string
          description: The password of the auth
        username:
          type: string
          description: The username of the auth
        role_type:
          $ref: '#/components/schemas/RoleType'
          description: The role type of the auth
        created_at:
          type: string
          format: date-time
          description: The created at of the auth
        updated_at:
          type: string
          format: date-time
          description: The updated at of the auth
        deleted_at:
          type: string
          format: date-time
          description: The deleted at of the auth
    User:
      type: object
      properties:
        auth:
          $ref: '#/components/schemas/Auth'
          description: The auth of the user
        first_name:
          type: string
          description: The first name of the user
        last_name:
          type: string
          description: The last name of the user
        dob:
          type: string
          format: date
          description: The date of birth of the user
        gender:
          type: string
          enum:
            - M
            - F
          description: The gender of the user
        country:
          $ref: '#/components/schemas/Country'
          description: The country of the user
        created_at:
          type: string
          format: date-time
          description: The created at of the user
        updated_at:
          type: string
          format: date-time
          description: The updated at of the user
        deleted_at:
          type: string
          format: date-time
          description: The deleted at of the user
    FoodType:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the food type
        name:
          type: string
          description: The name of the food type
        created_at:
          type: string
          format: date-time
          description: The created at of the food type
        updated_at:
          type: string
          format: date-time
          description: The updated at of the food type
        deleted_at:
          type: string
          format: date-time
          description: The deleted at of the food type
    DrinkType:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the drink type
        name:
          type: string
          description: The name of the drink type
        created_at:
          type: string
          format: date-time
          description: The created at of the drink type
        updated_at:
          type: string
          format: date-time
          description: The updated at of the drink type
        deleted_at:
          type: string
          format: date-time
          description: The deleted at of the drink type
    DietaryPreferenceType:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the dietary restriction type
        name:
          type: string
          description: The name of the dietary restriction type
        description:
          type: string
          description: The description of the dietary restriction type
        created_at:
          type: string
          format: date-time
          description: The created at of the dietary restriction type
        updated_at:
          type: string
          format: date-time
          description: The updated at of the fdietary restrictionodietary restrictionod type
        deleted_at:
          type: string
          format: date-time
          description: The deleted at of the dietary restriction type
    DietaryRestriction:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the dietary restriction
        name:
          type: string
          description: The name of the dietary restriction
        created_at:
          type: string
          format: date-time
          description: The created at of the dietary restriction
        updated_at:
          type: string
          format: date-time
          description: The updated at of the dietary restriction
        deleted_at:
          type: string
          format: date-time
          description: The deleted at of the dietary restriction
    UserPreference:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
          description: The user of the user preference
        food_type:
          $ref: '#/components/schemas/FoodType'
          description: The food type of the user preference
        drink_type:
          $ref: '#/components/schemas/DrinkType'
          description: The drink type of the user preference
        dietary_preference_type:
          $ref: '#/components/schemas/DietaryPreferenceType'
          description: The dietary preference type of the user preference
        dietary_restrictions:
          type: array
          items:
            $ref: '#/components/schemas/DietaryRestriction'
        created_at:
          type: string
          format: date-time
          description: The created at of the user preference
        updated_at:
          type: string
          format: date-time
          description: The updated at of the user preference
        deleted_at:
          type: string
          format: date-time
          description: The deleted at of the user preference
    SearchResponse:
      type: object
      properties:
        status:
          type: string
          description: The status of the response
        message:
          type: string
          description: The message of the response
        data:
          type: object
          description: The data of the response
        metadata:
          type: object
          description: The metadata of the response
          properties:
            total_data:
              type: integer
              description: The total data of the response
            total_count:
              type: integer
              description: The total count of the response has loaded
            next_offset:
              type: integer
              description: The offset for next the loaded more
            has_load_more:
              type: boolean
              description: The has load more of the response
    BaseResponse:
      type: object
      properties:
        status:
          type: string
          description: The status of the response
        message:
          type: string
          description: The message of the response
        data:
          type: object
          description: The data of the response
      required:
        - status
        - message
  requestBodies:
    RegisterRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: The email of the user
                example: test@example.com
              password:
                type: string
                description: The password of the user
                example: password
              username:
                type: string
                description: The username of the user
                example: testuser
              first_name:
                type: string
                description: The first name of the user
                example: John
              last_name:
                type: string
                description: The last name of the user
                example: Doe
              dob:
                type: string
                format: date-time
                description: The date of birth of the user
                example: 2001-01-01T00:00:00Z
              gender:
                type: string
                enum:
                  - M
                  - F
                description: The gender of the user
                example: M
              country_id:
                type: integer
                description: The ID of the country
                example: 1
    LoginRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: The email of the user
                example: test@example.com
              password:
                type: string
                description: The password of the user
                example: password
    PreferenceRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              food_type_id:
                type: integer
                description: The ID of the food type
                example: 1
              drink_type_id:
                type: integer
                description: The ID of the drink type
                example: 1
              dietary_preference_type_id:
                type: integer
                description: The ID of the dietary preference type
                example: 1
              dietary_restrictions:
                type: array
                description: The name of foods/drinks that restricted for user
                items:
                  type: string
                example:
                  - egg
                  - beef
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          examples:
            invalid request data:
              value:
                status: failed
                message: invalid request data
            mismatched data type:
              value:
                status: failed
                message: mismatched data type
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          examples:
            invalid token:
              value:
                status: failed
                message: invalid token
            unauthorized:
              value:
                status: failed
                message: unauthorized user
    BadGateway:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            status: failed
            message: external service error
    PreferenceResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            status: success
            message: preference retreived successfully
            data:
              food_type:
                id: 1
                name: creamy
              drink_type:
                id: 1
                name: hot
              dietary_preference_type:
                id: 1
                name: vegan
              dietary_restrictions:
                - id: 1
                  name: egg
                - id: 2
                  name: beef
    FoodTypesResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            status: success
            message: food types retreived successfully
            data:
              - id: 1
                name: dry
              - id: 2
                name: soupy
              - id: 3
                name: fried
              - id: 4
                name: starchy
              - id: 5
                name: grilled
              - id: 6
                name: baked
              - id: 7
                name: creamy
    DrinkTypesResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            status: success
            message: drink types retreived successfully
            data:
              - id: 1
                name: hot
              - id: 2
                name: cold
              - id: 3
                name: juice
              - id: 4
                name: smoothie
              - id: 5
                name: milk-based
              - id: 6
                name: infused water
    DietaryPreferenceTypesResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            status: success
            message: dietary preference types retreived successfully
            data:
              - id: 1
                name: vegan
                description: 'vegan is a type of food that does not contain any animal products. ex: beef, chicken, tofu, etc.'
              - id: 2
                name: vegetarian
                description: 'vegetarian is a type of food that does not contain any animal products and that does not contain any egg products. ex: broccoli, kale, spinach, etc.'
              - id: 3
                name: gluten-free
                description: 'gluten-free is a type of food that does not contain any gluten products. ex: bread, cereal, pasta, etc.'
              - id: 4
                name: dairy-free
                description: 'dairy-free is a type of food that does not contain any dairy products. ex: milk, cheese, yogurt, etc.'
    SearchItemsResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchResponse'
          example:
            status: success
            message: items retreived successfully
            data:
              - tag_id: '456'
                tag_name: item 1
                photo:
                  thumb: photo_url
              - tag_id: '123'
                tag_name: item 2
                photo:
                  thumb: photo_url
    ItemNutritionResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            status: success
            message: item nutrition retreived successfully
            data:
              food_name: apple
              serving_qty: 1
              serving_unit: unit
              serving_weight_grams: 123
              alt_measures:
                - serving_weight: 123
                  measure: measure 1
                  qty: 1
                - serving_weight: 234
                  measure: measure 2
                  qty: 1
                - serving_weight: 345
                  measure: measure 3
                  qty: 1
                - serving_weight: 456
                  measure: measure 4
                  qty: 1
                - serving_weight: 567
                  measure: measure 5
                  qty: 1
                - serving_weight: 678
                  measure: measure 6
                  qty: 1
              photo:
                thumb: photo_url
              nf_calories: 94.64
              nf_fat: 0
              nf_cholesterol: 0
              nf_total_carbohydrate: 25.13
              nf_sugars: 18.91
              nf_protein: 0.47
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
