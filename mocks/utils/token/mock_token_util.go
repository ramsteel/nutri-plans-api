// Code generated by mockery v2.42.2. DO NOT EDIT.

package token

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	token "nutri-plans-api/utils/token"

	uuid "github.com/google/uuid"
)

// MockTokenUtil is an autogenerated mock type for the TokenUtil type
type MockTokenUtil struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: uid, roleID
func (_m *MockTokenUtil) GenerateToken(uid uuid.UUID, roleID uint) (string, error) {
	ret := _m.Called(uid, roleID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uint) (string, error)); ok {
		return rf(uid, roleID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uint) string); ok {
		r0 = rf(uid, roleID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uint) error); ok {
		r1 = rf(uid, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClaims provides a mock function with given fields: c
func (_m *MockTokenUtil) GetClaims(c echo.Context) (*token.JWTClaim, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetClaims")
	}

	var r0 *token.JWTClaim
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*token.JWTClaim, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *token.JWTClaim); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.JWTClaim)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTokenUtil creates a new instance of MockTokenUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenUtil {
	mock := &MockTokenUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
