// Code generated by mockery v2.42.2. DO NOT EDIT.

package nutrition

import (
	context "context"
	dto "nutri-plans-api/dto"

	mock "github.com/stretchr/testify/mock"

	nutrition "nutri-plans-api/externals/nutrition"
)

// MockNutritionClient is an autogenerated mock type for the NutritionClient type
type MockNutritionClient struct {
	mock.Mock
}

// GetItemNutrition provides a mock function with given fields: ctx, r
func (_m *MockNutritionClient) GetItemNutrition(ctx context.Context, r *dto.ItemNutritionRequest) (*nutrition.ItemNutrition, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for GetItemNutrition")
	}

	var r0 *nutrition.ItemNutrition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ItemNutritionRequest) (*nutrition.ItemNutrition, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ItemNutritionRequest) *nutrition.ItemNutrition); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nutrition.ItemNutrition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ItemNutritionRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultipleItemNutritions provides a mock function with given fields: ctx, r
func (_m *MockNutritionClient) GetMultipleItemNutritions(ctx context.Context, r *dto.ItemNutritionRequest) (*[]nutrition.ItemNutrition, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for GetMultipleItemNutritions")
	}

	var r0 *[]nutrition.ItemNutrition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ItemNutritionRequest) (*[]nutrition.ItemNutrition, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ItemNutritionRequest) *[]nutrition.ItemNutrition); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]nutrition.ItemNutrition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ItemNutritionRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchItem provides a mock function with given fields: ctx, name
func (_m *MockNutritionClient) SearchItem(ctx context.Context, name string) (*[]nutrition.Item, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for SearchItem")
	}

	var r0 *[]nutrition.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*[]nutrition.Item, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]nutrition.Item); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]nutrition.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockNutritionClient creates a new instance of MockNutritionClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNutritionClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNutritionClient {
	mock := &MockNutritionClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
