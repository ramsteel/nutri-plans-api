// Code generated by mockery v2.42.2. DO NOT EDIT.

package repositories

import (
	context "context"
	dto "nutri-plans-api/dto"

	entities "nutri-plans-api/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// MockMealRepository is an autogenerated mock type for the MealRepository type
type MockMealRepository struct {
	mock.Mock
}

// AddMeal provides a mock function with given fields: ctx, meal
func (_m *MockMealRepository) AddMeal(ctx context.Context, meal *entities.Meal) error {
	ret := _m.Called(ctx, meal)

	if len(ret) == 0 {
		panic("no return value specified for AddMeal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Meal) error); ok {
		r0 = rf(ctx, meal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMealByID provides a mock function with given fields: ctx, uid, id
func (_m *MockMealRepository) GetMealByID(ctx context.Context, uid uuid.UUID, id uuid.UUID) (*entities.Meal, error) {
	ret := _m.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for GetMealByID")
	}

	var r0 *entities.Meal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*entities.Meal, error)); ok {
		return rf(ctx, uid, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *entities.Meal); ok {
		r0 = rf(ctx, uid, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Meal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, uid, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodayMeal provides a mock function with given fields: ctx, uid, start, end
func (_m *MockMealRepository) GetTodayMeal(ctx context.Context, uid uuid.UUID, start time.Time, end time.Time) (*entities.Meal, error) {
	ret := _m.Called(ctx, uid, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetTodayMeal")
	}

	var r0 *entities.Meal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) (*entities.Meal, error)); ok {
		return rf(ctx, uid, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) *entities.Meal); ok {
		r0 = rf(ctx, uid, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Meal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = rf(ctx, uid, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserMeals provides a mock function with given fields: ctx, uid, p
func (_m *MockMealRepository) GetUserMeals(ctx context.Context, uid uuid.UUID, p *dto.PaginationRequest) (*[]entities.Meal, int64, error) {
	ret := _m.Called(ctx, uid, p)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMeals")
	}

	var r0 *[]entities.Meal
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *dto.PaginationRequest) (*[]entities.Meal, int64, error)); ok {
		return rf(ctx, uid, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *dto.PaginationRequest) *[]entities.Meal); ok {
		r0 = rf(ctx, uid, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Meal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *dto.PaginationRequest) int64); ok {
		r1 = rf(ctx, uid, p)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, *dto.PaginationRequest) error); ok {
		r2 = rf(ctx, uid, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateMeal provides a mock function with given fields: ctx, meal
func (_m *MockMealRepository) UpdateMeal(ctx context.Context, meal *entities.Meal) error {
	ret := _m.Called(ctx, meal)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMeal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Meal) error); ok {
		r0 = rf(ctx, meal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockMealRepository creates a new instance of MockMealRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMealRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMealRepository {
	mock := &MockMealRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
