// Code generated by mockery v2.42.2. DO NOT EDIT.

package repositories

import (
	context "context"
	entities "nutri-plans-api/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUserPreferenceRepository is an autogenerated mock type for the UserPreferenceRepository type
type MockUserPreferenceRepository struct {
	mock.Mock
}

// CreateUserPreference provides a mock function with given fields: ctx, userPreference
func (_m *MockUserPreferenceRepository) CreateUserPreference(ctx context.Context, userPreference *entities.UserPreference) error {
	ret := _m.Called(ctx, userPreference)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserPreference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.UserPreference) error); ok {
		r0 = rf(ctx, userPreference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUserPreferences provides a mock function with given fields: ctx
func (_m *MockUserPreferenceRepository) GetAllUserPreferences(ctx context.Context) (*[]entities.UserPreference, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserPreferences")
	}

	var r0 *[]entities.UserPreference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]entities.UserPreference, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]entities.UserPreference); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.UserPreference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPreference provides a mock function with given fields: ctx, id
func (_m *MockUserPreferenceRepository) GetUserPreference(ctx context.Context, id uuid.UUID) (*entities.UserPreference, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPreference")
	}

	var r0 *entities.UserPreference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.UserPreference, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.UserPreference); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserPreference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPreference provides a mock function with given fields: ctx, userPreference
func (_m *MockUserPreferenceRepository) UpdateUserPreference(ctx context.Context, userPreference *entities.UserPreference) error {
	ret := _m.Called(ctx, userPreference)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPreference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.UserPreference) error); ok {
		r0 = rf(ctx, userPreference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockUserPreferenceRepository creates a new instance of MockUserPreferenceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserPreferenceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserPreferenceRepository {
	mock := &MockUserPreferenceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
