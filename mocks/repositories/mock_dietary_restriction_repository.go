// Code generated by mockery v2.42.2. DO NOT EDIT.

package repositories

import (
	context "context"
	entities "nutri-plans-api/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockDietaryRestrictionRepository is an autogenerated mock type for the DietaryRestrictionRepository type
type MockDietaryRestrictionRepository struct {
	mock.Mock
}

// DeleteDietaryRestriction provides a mock function with given fields: ctx, uid
func (_m *MockDietaryRestrictionRepository) DeleteDietaryRestriction(ctx context.Context, uid uuid.UUID) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDietaryRestriction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeletedDietaryRestrictions provides a mock function with given fields: ctx, userID
func (_m *MockDietaryRestrictionRepository) GetDeletedDietaryRestrictions(ctx context.Context, userID uuid.UUID) (*[]entities.DietaryRestriction, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDeletedDietaryRestrictions")
	}

	var r0 *[]entities.DietaryRestriction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*[]entities.DietaryRestriction, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *[]entities.DietaryRestriction); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.DietaryRestriction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockDietaryRestrictionRepository creates a new instance of MockDietaryRestrictionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDietaryRestrictionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDietaryRestrictionRepository {
	mock := &MockDietaryRestrictionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
