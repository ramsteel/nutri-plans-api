// Code generated by mockery v2.42.2. DO NOT EDIT.

package repositories

import (
	context "context"
	entities "nutri-plans-api/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

// CreateAuth provides a mock function with given fields: ctx, auth
func (_m *MockAuthRepository) CreateAuth(ctx context.Context, auth *entities.Auth) error {
	ret := _m.Called(ctx, auth)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Auth) error); ok {
		r0 = rf(ctx, auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsersAuths provides a mock function with given fields: ctx
func (_m *MockAuthRepository) GetAllUsersAuths(ctx context.Context) (*[]entities.Auth, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsersAuths")
	}

	var r0 *[]entities.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]entities.Auth, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]entities.Auth); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthByEmail provides a mock function with given fields: ctx, email
func (_m *MockAuthRepository) GetAuthByEmail(ctx context.Context, email string) (*entities.Auth, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthByEmail")
	}

	var r0 *entities.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.Auth, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Auth); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
